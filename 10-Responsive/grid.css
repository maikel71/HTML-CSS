/*Documentacion de w3schools*/

/* GRID INTRO */

/* CSS Grid Layout Module - Módulo CSS Grid Layout */

/* Grid Layout - Disposición de la cuadrícula */
/*
    El módulo CSS Grid Layout ofrece un sistema de maquetación grid-based(basado en cuadrícula), 
    con filas(rows) y columnas(columns), que facilita el diseño de páginas web sin tener que 
    utilizar floats(flotadores) ni positioning(posicionadores).
*/

/* Grid Elements - Elementos de cuadrícula */
/* Un grid layout(diseño de rejilla) consiste en un elemento padre, con uno o más elementos hijos. */

/* EJEMPLO 1 */
.grid-container {
    display: grid;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

.grid-item {
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.8);
    padding: 20px;
    font-size: 30px;
    text-align: center;
}

/*-------------------------------------------------------------------------*/

/* Display Property - Mostrar propiedad */
/* Un elemento HTML se convierte en contenedor de rejilla cuando su propiedad display 
se establece como grid o inline-grid. */

/* EJEMPLO 2: display: grid */
.grid-container-2 {
    display: grid;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

/* EJEMPLO 3: display: inline-grid */
.grid-container-3 {
    display: inline-grid;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

/*
Todos los hijos directos del contenedor de la rejilla se convierten automáticamente en elementos de la rejilla.
All direct children of the grid container automatically become grid items.
*/

/*-------------------------------------------------------------------------*/

/* Grid Columns - Columnas de cuadrícula */
/* Las líneas verticales de los elementos de la grid(cuadrícula) se denominan columns(columnas). ⬇️⬆️ */

/* Grid Rows - Filas de cuadrícula */
/* Las líneas horizontales de los elementos de la grid(cuadrícula) se denominan rows(filas). ➡️⬅️ */

/* Grid Gaps - Huecos en la rejilla */
/* Los espacios entre cada columna/fila se denominan gaps(huecos). */

/* Puede ajustar el tamaño del gap(hueco) utilizando una de las siguientes propiedades: 
    > column-gap
    > row-gap
    > gap
*/

/* EJEMPLO 4 */
/* La propiedad column-gap establece el espacio entre las columnas: */
.grid-container-4 {
    display: grid;
    column-gap: 50px;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

/* EJEMPLO 5 */
/* La propiedad row-gap establece el espacio entre las filas: */
.grid-container-5 {
    display: grid;
    row-gap: 50px;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

/* EJEMPLO 6 */
/* La propiedad gap es una propiedad abreviada para las propiedades de row-gap y column-gap: */
.grid-container-6 {
    display: grid;
    gap: 50px 100px;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

/* EJEMPLO 7 */
/* La propiedad gap también se puede usar para establecer tanto el espacio entre filas como 
el espacio entre columnas en un valor: */
.grid-container-7 {
    display: grid;
    gap: 50px;
    grid-template-columns: auto auto auto;
    background-color: #2196f3;
    padding: 10px;
}

/*-------------------------------------------------------------------------*/

/* Grid Lines - Líneas de cuadrícula */
/*
    Las líneas(lines) entre columnas se denominan column lines(líneas de columna).
    Las líneas(lines) entre filas se llaman row lines(líneas de fila).

    Consulte los números de línea cuando coloque un elemento de cuadrícula en un contenedor de cuadrícula:
*/

/* EJEMPLO 8 */
/* Coloque un elemento de la cuadrícula en la línea de columna 1 y deje que termine en la línea de columna 3: */
.grid-container-8 {
    display: grid;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-8 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

.item2 {
    grid-column-start: 1;
    grid-column-end: 3;
}
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* GRID CONTAINER */

/* Grid Container */
/*
    Para hacer que un elemento HTML se comporte como una rejilla contenedora, tienes que establecer 
    la propiedad display a grid o inline-grid.
    Los contenedores de rejilla consisten en elementos de rejilla, colocados dentro de columnas y filas.
*/

/* The grid-template-columns Property - Propiedad grid-template-columns */
/*
    La propiedad grid-template-columns define el número de columnas en su diseño de rejilla, y 
    puede definir el ancho de cada columna.
    El valor es una lista separada por espacios, en la que cada valor define la anchura de la 
    columna correspondiente.
*/

/* EJEMPLO 9 */
/* Si desea que su diseño de cuadrícula contenga 4 columnas, especifique la anchura de 
las 4 columnas, o "auto" si todas las columnas deben tener la misma anchura. */

.grid-container-9 {
    display: grid;
    grid-template-columns: auto auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-9 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* Nota: Si tiene más de 4 elementos en una cuadrícula de 4 columnas, la cuadrícula 
añadirá automáticamente una nueva fila para colocar los elementos. */

/* La propiedad grid-template-columns también puede utilizarse para especificar el 
tamaño (anchura) de las columnas. */

.grid-container-10 {
    display: grid;
    grid-template-columns: 80px 200px auto 30px;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-10 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* The grid-template-rows Property - La propiedad grid-template-rows */

/* La propiedad grid-template-rows define la altura de cada fila. */

/* El valor es una lista separada por espacios, donde cada valor define la altura de la fila respectiva: */

/* EJEMPLO 11 */
.grid-container-11 {
    display: grid;
    grid-template-columns: auto auto auto;
    grid-template-rows: 80px 200px;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-11 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* The justify-content Property - La propiedad justify-content */
/*
    La propiedad justify-content se utiliza para alinear toda la rejilla dentro del contenedor.
    Nota: El ancho total de la rejilla debe ser menor que el ancho del contenedor para 
    que la propiedad justify-content tenga efecto.
*/

/* EJEMPLO 12 */
.grid-container-12 {
    display: grid;
    justify-content: space-evenly;
    grid-template-columns: 50px 50px 50px; /* Hacer la rejilla más pequeña que el contenedor */
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-12 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 13 */
.grid-container-13 {
    display: grid;
    justify-content: space-around;
    grid-template-columns: 50px 50px 50px; /* Hacer la rejilla más pequeña que el contenedor */
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-13 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 14 */
.grid-container-14 {
    display: grid;
    justify-content: space-between;
    grid-template-columns: 50px 50px 50px; /* Hacer la rejilla más pequeña que el contenedor */
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-14 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 15 */
.grid-container-15 {
    display: grid;
    justify-content: center;
    grid-template-columns: 50px 50px 50px; /* Hacer la rejilla más pequeña que el contenedor */
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-15 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 16 */
.grid-container-16 {
    display: grid;
    justify-content: start;
    grid-template-columns: 50px 50px 50px; /* Hacer la rejilla más pequeña que el contenedor */
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-16 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 17 */
.grid-container-17 {
    display: grid;
    justify-content: end;
    grid-template-columns: 50px 50px 50px; /* Hacer la rejilla más pequeña que el contenedor */
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-17 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* The align-content Property - La propiedad align-content */

/*
    La propiedad align-content se utiliza para alinear verticalmente toda la rejilla 
    dentro del contenedor.

    Nota: La altura total de la rejilla tiene que ser menor que la altura del contenedor 
    para que la propiedad alinear-contenido tenga algún efecto.
*/

/* EJEMPLO 18 */
.grid-container-18 {
    display: grid;
    height: 400px;
    align-content: center;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-18 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 19 */
.grid-container-19 {
    display: grid;
    height: 400px;
    align-content: space-evenly;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-19 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 20 */
.grid-container-20 {
    display: grid;
    height: 400px;
    align-content: space-around;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-20 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 21 */
.grid-container-21 {
    display: grid;
    height: 400px;
    align-content: space-between;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-21 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 22 */
.grid-container-22 {
    display: grid;
    height: 400px;
    align-content: start;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-22 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 23 */
.grid-container-23 {
    display: grid;
    height: 400px;
    align-content: end;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-23 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* GRID ITEM */

/* Child Elements (Items) - Elementos hijos (Elementos) */
/*
    Un grid container(contenedor de rejilla) contiene grid items(elementos de rejilla).
    Por defecto, un container(contenedor) tiene un grid item(elemento de rejilla) 
    por cada columna, en cada fila, pero puede aplicar estilo a los grid items(elementos de rejilla) 
    para que abarquen varias columnas y/o filas.
*/

/* The grid-column Property: - La propiedad grid-column:*/
/*
    La propiedad grid-column define en qué columna(s) colocar un elemento.
    Se define dónde empezará el elemento y dónde terminará.

    Nota: La propiedad grid-column es una propiedad abreviada de las propiedades 
    grid-column-start y grid-column-end.

    Para colocar un elemento, puede hacer referencia a los números de línea o 
    utilizar la palabra clave "span" para definir cuántas columnas abarcará el elemento.
*/

/* EJEMPLO 24 */
.grid-container-24 {
    display: grid;
    grid-template-columns: auto auto auto auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-24 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/*Haz que "item3" empiece en la columna 1 y termine antes de la columna 5:*/
.item3 {
    grid-column: 1 / 5;
}

/* EJEMPLO 25 */
/* Haz que "item4" empiece en la columna 1 y abarque 3 columnas: */
.item4 {
    grid-column: 1 / span 3;
}

/* EJEMPLO 26 */
/*Haz que "item5" empiece en la columna 2 y abarque 3 columnas:*/
.item5 {
    grid-column: 2 / span 3;
}

/* The grid-row Property - La propiedad grid-row */
/*
    La propiedad grid-row define en qué fila colocar un elemento.
    Se define dónde empezará el elemento y dónde terminará.

    Nota: La propiedad grid-row es una propiedad abreviada de las propiedades grid-row-start y grid-row-end.

    Para colocar un elemento, puede hacer referencia a los números de línea o 
    utilizar la palabra clave "span" para definir cuántas filas abarcará el elemento:
*/

/* EJEMPLO 27 */
/* Haga que "item6" empiece en la línea 1 y termine en la línea 4: */
.grid-container-27 {
    display: grid;
    grid-template-columns: auto auto auto auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-27 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

.item6 {
    grid-row: 1 / 4;
}

/* EJEMPLO 28 */
/* Haz que "item7" empiece en la fila 1 y abarque 2 filas: */
.item7 {
    grid-row: 1 / span 2;
}

/* The grid-area Property - La propiedad grid-area */
/*
    La propiedad grid-area puede utilizarse como una propiedad abreviada para 
    las propiedades grid-row-start, grid-column-start, grid-row-end y grid-column-end.
*/

/* EJEMPLO 29 */
/* Haz que "item8" empiece en la línea de fila 1 y la línea de columna 2, 
y termine en la línea de fila 5 y la línea de columna 6: */
.item8 {
    grid-area: 1 / 2 / 5 / 6;
}

/* EJEMPLO 30 */
/* Haz que "item8" empiece en la línea de fila 2 y la línea de columna 1, y abarque 2 filas y 3 columnas: */
.item10 {
    grid-area: 2 / 1 / span 2 / span 3;
}

/* Naming Grid Items - Nombrar elementos de la cuadrícula */
/*
    La propiedad grid-area también puede utilizarse para asignar nombres a los elementos de la cuadrícula.
    Se puede hacer referencia a los elementos de rejilla con nombre mediante la propiedad 
    grid-template-areas del contenedor de rejilla.
*/

/* EJEMPLO 31 */
/* El item11 recibe el nombre de "myArea" y abarca las cinco columnas de una cuadrícula de cinco columnas: */

.item11 {
    grid-area: myArea;
}

.grid-container-31 {
    display: grid;
    grid-template-areas: "myArea myArea  myArea  myArea  myArea";
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-31 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* 
    Cada fila está definida por apóstrofes (' ')
    Las columnas de cada fila se definen dentro de los apóstrofes, separadas por un espacio.

    Nota: Un punto representa un elemento de la cuadrícula sin nombre.
*/

/* EJEMPLO 32 */
/* Deje que "myArea" abarque dos columnas en un diseño de cuadrícula de cinco columnas 
(los signos de punto representan elementos sin nombre): */
.item12 {
    grid-area: myArea;
}

.grid-container-32 {
    display: grid;
    grid-template-areas: "myArea myArea . . .";
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-32 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* Para definir dos filas, defina la columna de la segunda fila dentro de otro conjunto de apóstrofes: */

/* EJEMPLO 33 */
/* Haz que "item12" abarque dos columnas y dos filas: */

.grid-container-33 {
    display: grid;
    grid-template-areas: "myArea myArea . . ." "myArea myArea . . .";
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-33 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* EJEMPLO 34 */
/* Nombra todos los elementos y crea una plantilla de página web lista para usar: */
.item13 {
    grid-area: header;
}
.item14 {
    grid-area: menu;
}
.item15 {
    grid-area: main;
}
.item16 {
    grid-area: right;
}
.item17 {
    grid-area: footer;
}

.grid-container-34 {
    display: grid;
    grid-template-areas:
        "header header header header header header"
        "menu main main main right right"
        "menu footer footer footer footer footer";
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-34 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

/* The Order of the Items - El orden de los items */
/* El diseño de cuadrícula nos permite colocar los elementos donde queramos. 
El primer elemento del código HTML no tiene por qué aparecer como primer elemento de la cuadrícula.*/

/* EJEMPLO 35 */
.grid-container-35 {
    display: grid;
    grid-template-columns: auto auto auto;
    gap: 10px;
    background-color: #2196f3;
    padding: 10px;
}

.grid-container-35 > div {
    background-color: rgba(255, 255, 255, 0.8);
    text-align: center;
    padding: 20px 0;
    font-size: 30px;
}

.item18 {
    grid-area: 1 / 3 / 2 / 4;
}
.item19 {
    grid-area: 2 / 3 / 3 / 4;
}
.item20 {
    grid-area: 1 / 1 / 2 / 2;
}
.item21 {
    grid-area: 1 / 2 / 2 / 3;
}
.item22 {
    grid-area: 2 / 1 / 3 / 2;
}
.item23 {
    grid-area: 2 / 2 / 3 / 3;
}

/* Puede reorganizar el orden para determinados tamaños de pantalla, utilizando media queries: */

/* EJEMPLO 36 */
@media only screen and (max-width: 500px) {
    .item24 {
        grid-area: 1 / span 3 / 2 / 4;
    }
    .item25 {
        grid-area: 3 / 3 / 4 / 4;
    }
    .item26 {
        grid-area: 2 / 1 / 3 / 2;
    }
    .item27 {
        grid-area: 2 / 2 / span 2 / 3;
    }
    .item28 {
        grid-area: 3 / 1 / 4 / 2;
    }
    .item29 {
        grid-area: 2 / 3 / 3 / 4;
    }
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*Clase de Open Boot Camp*/
.contenedor {
    display: grid;
    gap: 0.5rem;
    /* column-gap: 0.1rem; */
    /* row-gap: 1rem; */
    /* grid-template-columns: auto auto auto; */
    /* grid-template-columns: 20px 3rem 025vw; */
    grid-template-columns: 1fr 1fr 3fr;
    grid-template-rows: 200px 5rem 100px;
    /* grid-template-areas: "head head head" "main main main" "footer footer footer"; */
}

.item {
    background-color: aquamarine;
    padding: 0.25rem;
    font-size: 2rem;
    border: solid 1px blue;
}

.item1 {
    /* grid-area: head; */

    /* grid-column: 1 / 3; */
    grid-column: 2 / span 2;
}

.item9 {
    /* grid-area: footer; */

    grid-area: 2 / 1 / 4/ 3;
    /* grid-area: filaInicio / colInicio / filaFin / colFin; */
}
